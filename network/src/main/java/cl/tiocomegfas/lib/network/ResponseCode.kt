package cl.tiocomegfas.lib.network

enum class ResponseCode(val code: Int) {
    HTTP_UNKNOWN(-1),

    HTTP_OK(200),
    HTTP_CREATED(201),
    HTTP_ACCEPTED(202),
    HTTP_NOT_AUTHORITATIVE(203),
    HTTP_NO_CONTENT(204),
    HTTP_RESET(205),
    HTTP_PARTIAL(206),

    HTTP_MULTI_CHOICE(300),
    HTTP_MOVED_PERMANENTLY(301),
    HTTP_MOVED_TEMPORARY(302),
    HTTP_SEE_OTHER(303),
    HTTP_NOT_MODIFIED(304),
    HTTP_USE_PROXY(305),

    HTTP_BAD_REQUEST(400),
    HTTP_UNAUTHORIZED(401),
    HTTP_PAYMENT_REQUIRED(402),
    HTTP_FORBIDDEN(403),
    HTTP_NOT_FOUND(404),
    HTTP_BAD_METHOD(405),
    HTTP_NOT_ACCEPTABLE(406),
    HTTP_PROXY_AUTH(407),
    HTTP_CLIENT_TIMEOUT(408),
    HTTP_CONFLICT(409),
    HTTP_GONE(410),
    HTTP_LENGTH_REQUIRED(411),
    HTTP_PRECONDITION_FAILED(412),
    HTTP_ENTITY_TOO_LARGE(413),
    HTTP_REQUEST_TOO_LONG(414),
    HTTP_UNSUPPORTED_MEDIA_TYPE(415),

    HTTP_INTERNAL_ERROR(500),
    HTTP_NOT_IMPLEMENTED(501),
    HTTP_BAD_GATEWAY(502),
    HTTP_UNAVAILABLE(503),
    HTTP_GATEWAY_TIMEOUT(504),
    HTTP_VERSION_NOT_SUPPORTED(505);

    fun findCode(value: Int): ResponseCode {
        return when(value) {
            HTTP_OK.code -> HTTP_OK
            HTTP_CREATED.code -> HTTP_CREATED
            HTTP_ACCEPTED.code -> HTTP_ACCEPTED
            HTTP_NOT_AUTHORITATIVE.code -> HTTP_NOT_AUTHORITATIVE
            HTTP_NO_CONTENT.code -> HTTP_NO_CONTENT
            HTTP_RESET.code -> HTTP_RESET
            HTTP_PARTIAL.code -> HTTP_PARTIAL
            HTTP_MULTI_CHOICE.code -> HTTP_MULTI_CHOICE
            HTTP_MOVED_PERMANENTLY.code -> HTTP_MOVED_PERMANENTLY
            HTTP_MOVED_TEMPORARY.code -> HTTP_MOVED_TEMPORARY
            HTTP_SEE_OTHER.code -> HTTP_SEE_OTHER
            HTTP_NOT_MODIFIED.code -> HTTP_NOT_MODIFIED
            HTTP_USE_PROXY.code -> HTTP_USE_PROXY
            HTTP_BAD_REQUEST.code -> HTTP_BAD_REQUEST
            HTTP_UNAUTHORIZED.code -> HTTP_UNAUTHORIZED
            HTTP_PAYMENT_REQUIRED.code -> HTTP_PAYMENT_REQUIRED
            HTTP_FORBIDDEN.code -> HTTP_FORBIDDEN
            HTTP_NOT_FOUND.code -> HTTP_NOT_FOUND
            HTTP_BAD_METHOD.code -> HTTP_BAD_METHOD
            HTTP_NOT_ACCEPTABLE.code -> HTTP_NOT_ACCEPTABLE
            HTTP_PROXY_AUTH.code -> HTTP_PROXY_AUTH
            HTTP_CLIENT_TIMEOUT.code -> HTTP_CLIENT_TIMEOUT
            HTTP_CONFLICT.code -> HTTP_CONFLICT
            HTTP_GONE.code -> HTTP_GONE
            HTTP_LENGTH_REQUIRED.code -> HTTP_LENGTH_REQUIRED
            HTTP_PRECONDITION_FAILED.code -> HTTP_PRECONDITION_FAILED
            HTTP_ENTITY_TOO_LARGE.code -> HTTP_ENTITY_TOO_LARGE
            HTTP_REQUEST_TOO_LONG.code -> HTTP_REQUEST_TOO_LONG
            HTTP_UNSUPPORTED_MEDIA_TYPE.code -> HTTP_UNSUPPORTED_MEDIA_TYPE
            HTTP_INTERNAL_ERROR.code -> HTTP_INTERNAL_ERROR
            HTTP_NOT_IMPLEMENTED.code -> HTTP_NOT_IMPLEMENTED
            HTTP_BAD_GATEWAY.code -> HTTP_BAD_GATEWAY
            HTTP_UNAVAILABLE.code -> HTTP_UNAVAILABLE
            HTTP_GATEWAY_TIMEOUT.code -> HTTP_GATEWAY_TIMEOUT
            HTTP_VERSION_NOT_SUPPORTED.code -> HTTP_VERSION_NOT_SUPPORTED
            else -> HTTP_UNKNOWN
        }
    }

    fun isSuccess(): Boolean {
        return this == HTTP_OK
    }
}